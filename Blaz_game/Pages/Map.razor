@page "/carte"
@inject IJSRuntime JsRuntime
@using Player

@{
    int rows = 10;
    int cols = 10;
    int cellSize = 65;
    int gapSize = 1;
}

<div style="background-size: cover; 
background-repeat: no-repeat; 
background-position: center; 
position: relative; 
display: flex; 
flex-direction: row;">
    <div style="
        background-image: url('./Backgrounds/donjon_bg-1.jpg');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        position: relative;
        display: grid;
        grid-template-columns: repeat(@cols, 1fr);
        width: calc(@(cols * (cellSize + gapSize))px);">
        @for (int row = 0; row < rows; row++)
        {
            for (int col = 0; col < cols; col++)
            {
                <div style="border: 1px solid lightslategrey;
                    height: @(cellSize)px;
                background-repeat: no-repeat;
                background-size: cover;
                background-position: center;">
                </div>
            }
        }
        <div id="character" style="
        position: absolute; 
        width: 40px; 
        height: 40px; 
        background-image: url('./Backgrounds/Chevalier-pixel.png'); 
        background-size: contain; 
        background-repeat: no-repeat; 
        background-position: center;">
        </div>
    </div>

    <div style="
    background-size: cover;
    background-repeat: no-repeat; 
    background-position: center; 
    position: relative; 
    display: flex; 
    flex-direction: column; 
    justify-content: space-around;">
        <div style="flex-grow: 1; 
        border-style: double; 
        border-width: 4px; 
        border-color: darkslategrey; 
        background-image: url('./Backgrounds/WoodPixelArt.png'); 
        width: 500px; height: 150px; 
        margin-left: 50px; 
        margin-bottom: 10px; 
        color: lightgray;">
            <h4>Statistiques</h4>
            <div style="display: grid; 
            font-size: 15px;
            grid-template-columns: 1fr 1fr; 
            column-gap: 10px;">
                <p>PV: @joueur.PV</p>
                <p>Attaque: @joueur.Attaque</p>
                <p>Vitesse d'Attaque: @joueur.VitesseAttaque</p>
                <p>Agilité: @joueur.Agilite</p>
                <p>Armure: @joueur.Armure</p>
            </div>

            <!-- Affichage de l'or -->
            <div id = "gold-display" style="
            margin-left: 370px; 
            margin-top: -173px;
            padding: 10px; 
            height: 35px; 
            width: 120px; 
            border: 2px solid gold; 
            background-color: rgba(0, 0, 0, 0.5); 
            color: gold; 
            font-size: 18px;">
                
            </div>
        </div>

        <div style="flex-grow: 1; border-style: double; border-width: 4px; border-color: darkslategrey; background-image: url('./Backgrounds/WoodPixelArt.png'); width: 500px; height: 150px; margin-left: 50px; margin-bottom: 10px; color: lightgray;">
            <p>Inventaire rapide</p>
            <div id="ObjetsRapide" class="row">
                <div class="itemsmall"></div>
                <div class="itemsmall"></div>
                <div class="itemsmall"></div>
                <div class="itemsmall"></div>
                <div class="itemsmall"></div>
                
               
            </div>
        </div>

        <div id="encounter-messages" style="
        font-size: 15px;
        flex-grow: 3; 
        border-style: double; 
        border-width: 4px; 
        border-color: darkslategrey; 
        background-image: url('./Backgrounds/WoodPixelArt.png'); 
        width: 500px; 
        height: 250px; 
        margin-left: 50px; 
        color: lightgrey; overflow: auto; 
        word-wrap: break-word;">

        </div>

    </div>
</div>

<script>
    const encounterMessages = document.getElementById('encounter-messages');

    // Fonction pour faire défiler jusqu'en bas
    function scrollToBottom() {
        encounterMessages.scrollTop = encounterMessages.scrollHeight;
    }
    {
        scrollToBottom();
    }
</script>


@code {
    private Joueur joueur = new Joueur();
    private int goldAmount = 100;

    public int GoldAmount
    {
        get => goldAmount;
        set
        {
            if (goldAmount != value)
            {
                goldAmount = value;
                StateHasChanged(); // Rafraîchit l'UI après modification
            }
        }
    }

    private void AddGold(int amount)
    {
        GoldAmount += amount;
    }

    [JSInvokable]
    public void UpdateGoldFromJs(int newGoldAmount)
    {
        GoldAmount = newGoldAmount;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("initializeCharacter");
        }
    }
}
